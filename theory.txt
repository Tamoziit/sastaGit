Git File Structure

--> $ git init : cmd that initializes a .git dir under pwd.

NB : <name>/ -->signifies folder, <name> signfies file
.git/
  |__ HEAD --> stores info about the current branch
  |__ objects/ --> stores all commits. If commit id = 66rysfgsu14425, then it creates a folder structure as:
  |     |__ 66/ (dir. of 1st 2 digits of the commit)
  |        |__ rysfgsu14425 (file with filename - remaining digits of commit --> stores compressed data about the commit)
  |__ refs/ --> stores ponters or tags to branches, configs, etc.
  |__ config --> stores all config data of repo

--> $ git hash-object <file> --> creates a Hash-object or blob file of the file provided.
if used with -w flag --> it writes a directory with 1st 2 characters of SHA of the file & stores the blob file contents inside the dir. in a file, with filename of remaining SHA characters.

eg: $ git hash-object config --> creates a hash "043110b5f5ab711230c68730edeba7e7d892c190"
$ git hash-object -w config --> creates 04/3110b5f5ab711230c68730edeba7e7d892c190 structure
3110b5f5ab711230c68730edeba7e7d892c190 file contains -->
blob <size of the file provided>\0<actual contents of the file>

--> $ git ls-tree <commit-sha> --> shows the files & dirs. affected by a particular commit along with their permissions, hashes & types
If used with "--name-only" flag, it displays only the affected files/folder names
> Steps to achieve this -->
Go to -->
.git/
  |__ objects/
        |__sha[0..2]/
              |__sha[2...n] file
Once we get to this file > read the object file > decompress the file > We get a tree output > if flag provided then print only names, else print full tree structure.

Contents of a tree -->
tree <size>\0
<mode> <name>\0<20_byte_sha> //files under tree
<mode> <name>\0<20_byte_sha>
...& so on...

--> $ git write-tree --> writes a tree at the pwd.
> It iterates over all items in the pwd
> If the item is a file, then it creates its blob & records its SHA.
> If the item is a folder, then it recursively goes into the folder to create blobs & hashes for files & further trees for folders inside it (recursively).
> Storing all these blobs & recursive trees inside .git/objects/